---
title: "Lecture 7: MCMC Diagnostics & Adaptive Metropolis"
subtitle: "STA702"
author: "Merlise Clyde"
institute: "Duke University"
format: 
  revealjs:
    theme: [simple, custom.scss]
    slide-number: true
    incremental: true
    scrollable: false
    controls: true
    fragments: true
    preview-links: auto
    logo: ../../img/icon.png
    footer: <https://sta702-F23.github.io/website/>
    chalkboard: 
      boardmarker-width: 1
      chalk-width: 2
      chalk-effect: 0
    embed-resources: false
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"    
editor: 
  markdown: 
    wrap: 72
execute: 
  echo: false
---

```{r setup, include=FALSE}
# R options
options(
  htmltools.dir.version = FALSE, # for blogdown
  show.signif.stars = FALSE,     # for regression output
  warm = 1
  )
# Set dpi and height for images
library(knitr)
knitr::opts_chunk$set(fig.height = 2.65, dpi = 300,fig.align='center',fig.show='hold',size='footnotesize', small.mar=TRUE) 
# For nonsese...
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
require(lattice)
require(MCMCpack)
require(hdrcde)
require(coda)
require(mvtnorm)
#require(rethinking)
set.seed(42)
```




## Example from Last Class {.smaller}

- Marginal Likelihood 
$$\cal{L}(\mu, \sigma^2, \sigma^2_\mu) \propto (\sigma^2 + \sigma^2_\mu)^{-n/2} \exp \left\{ - \frac{1}{2} \frac{\sum_{i=1}^n\left(y_i - \mu \right)^2}{\sigma^2 + \sigma^2_\mu }\right\}$$


- Priors with $\sigma^2 = 1$: $p(\mu) \propto 1$
  and $\sigma_\mu \sim  \textsf{Cauchy}^+(0,1)$ independent of $\mu$

  

- Symmetric proposal for $\mu$ and  $\sigma_\tau$    

  

-  Independent normals centered at current values of $\mu$ and $\sigma_\mu$  with covariance $\frac{2.38^2}{d} \textsf{Cov}(\theta)$ where $d = 2$ (the dimension of $\theta$ ) 

 

-  $\delta^2 = 2.38^2/d$ optimal for multivariate normal target  [Roberts, Gelman, and Gilks (1997)](https://projecteuclid.org/journals/annals-of-applied-probability/volume-7/issue-1/Weak-convergence-and-optimal-scaling-of-random-walk-Metropolis-algorithms/10.1214/aoap/1034625254.full) with acceptance rate ranging from 40% to 23.4% (as $d \to \infty$)



```{r metropolis, echo=FALSE}
tau = .1

sigma = 1
n = 100
mu.true = sort(rnorm(n, 0, tau))
y = rnorm(n, mu.true, sigma)

ybar = mean(y)
ssy = sum((y - ybar)^2)

R = 10000

#initialize

sigmamu = rep(NA, R)
mu = rep(NA, R)
sigmamu.prop = rep(NA, R)
mu.prop = mu
keep = mu

log.lik =  function(mu, sigma.mu, sigma, ybar, ssy, n ) {
  -.5*(n*log(sigma^2 + sigma.mu^2) + 
         (ssy +
         n*(ybar - mu)^2)/(sigma^2 + sigma.mu^2))
}

log.prior = function(x) { dt(x, 1, log=TRUE)}
sigmamu.sd = .1*2.44/2
mu.sd = .5*2.44/sqrt(n)

# initialize
sigmamu[1] = 1/tau
mu[1] = rnorm(1, ybar, sqrt(1 + sigmamu[1]^2)/sqrt(n))
log.post = log.prior(sigmamu[1]) + log.lik(mu[1],sigmamu[1], sigma, ybar, ssy, n)
keep[1] = 1
acc=0

for (r in 2:R) {
  sigmamu.star = rnorm(1, sigmamu[r - 1], sigmamu.sd)
  mu.star = rnorm(1, mu[r-1], mu.sd)
  log.prop = log.prior(sigmamu.star) + 
    log.lik(mu.star, sigmamu.star, sigma, ybar, ssy, n)
  M = min(1, exp(log.prop - log.post))
  sigmamu.prop[r] = sigmamu.star
  mu.prop[r] = mu.star
  if (runif(1) < M) {
    sigmamu[r] =  sigmamu.star
    mu[r] =  mu.star
    log.post = log.prop
    acc = acc + 1
    keep[r] = 1
  }
  else { 
         mu[r] = mu[r-1]
         sigmamu[r] = sigmamu[r-1]
         keep[r] = 2
  }
}
 
sigmamu = abs(sigmamu) 
theta1 = cbind(mu, sigmamu)
colnames(theta1) = c("mu", "sigma_mu")
```


```{r metropolis_2, echo=FALSE}




#initialize

sigmamu = rep(NA, R)
mu = rep(NA, R)
sigmamu.prop = rep(NA, R)
mu.prop = mu
keep = mu

log.lik =  function(mu, sigma.mu, sigma, ybar, ssy, n ) {
  -.5*(n*log(sigma^2 + sigma.mu^2) + 
         (ssy +
         n*(ybar - mu)^2)/(sigma^2 + sigma.mu^2))
}

log.prior = function(x) { dt(x, 1, log=TRUE)}


# initialize
sigmamu[1] = 1
mu[1] = rnorm(1, ybar, sqrt(1 + sigmamu[1]^2)/sqrt(n))
log.post = log.prior(sigmamu[1]) + log.lik(mu[1],sigmamu[1], sigma, ybar, ssy, n)
keep[1] = 1
acc=0

for (r in 2:R) {
  sigmamu.star = rnorm(1, sigmamu[r - 1], sigmamu.sd)
  mu.star = rnorm(1, mu[r-1], mu.sd)
  log.prop = log.prior(sigmamu.star) + 
    log.lik(mu.star, sigmamu.star, sigma, ybar, ssy, n)
  M = min(1, exp(log.prop - log.post))
  sigmamu.prop[r] = sigmamu.star
  mu.prop[r] = mu.star
  if (runif(1) < M) {
    sigmamu[r] =  sigmamu.star
    mu[r] =  mu.star
    log.post = log.prop
    acc = acc + 1
    keep[r] = 1
  }
  else { 
         mu[r] = mu[r-1]
         sigmamu[r] = sigmamu[r-1]
         keep[r] = 2
  }
}
 
sigmamu = abs(sigmamu) 
theta = cbind(mu, sigmamu)
colnames(theta) = c("mu", "sigma_mu")
```




 
## Convergence diagnostics {.smaller}

- Diagnostics available to help decide on number of burn-in & collected samples.

  

- **Note**: no definitive tests of convergence but you should do as many diagnostics as you can, on all parameters in your model.

  

- With "experience", visual inspection of trace plots perhaps most useful approach.

  

- There are a number of useful automated tests in R.

  

- **CAUTION**: diagnostics cannot guarantee that a chain has converged, but they can indicate it has not converged.



 
## Diagnostics in R {.smaller}




- The most popular package for MCMC diagnostics in R is `coda`.

  

- `coda` uses a special MCMC format so you must always convert your posterior matrix into an MCMC object. 

  

- For the example, we have the following in R.

. . .
```{r fig.height=4, echo=TRUE}
#library(coda)
theta.mcmc <- mcmc(theta,start=1) #no burn-in (simple problem!)
```



 
## Diagnostics in R {.smaller}

```{r fig.height=4, echo=TRUE}
summary(theta.mcmc)
```

- The naive SE is the **standard error of the mean**, which captures simulation error of the mean rather than the posterior uncertainty. 

- The time-series SE adjusts the naive SE for **autocorrelation**.



 
## Effective Sample Size {.smaller}

- The **effective sample size** translates the number of MCMC samples $S$ into an equivalent number of independent samples.

  

- It is defined as
$$\textrm{ESS} = \dfrac{S}{1 + 2 \sum_k \rho_k},$$

 -  $S$ is the sample size and $\rho_k$ is the lag $k$ autocorrelation.
  
  

- For our data, we have

. . .

```{r, echo=TRUE }
effectiveSize(theta.mcmc)
```

```{r, echo=FALSE,include=FALSE}
ESS = effectiveSize(theta.mcmc)
```

  

- So our 10,000 samples are equivalent to `r round(ESS["mu"], 1)` independent samples for $\mu$  and `r round(ESS["sigma_mu"], 1)` independent samples for $\sigma_\mu$.




 
## Trace plot for mean

```{r fig.height=3.9}
plot(theta.mcmc[,"mu"])
```



 
## Trace plot for $\sigma_\mu$

```{r fig.height=3.9}
plot(theta.mcmc[,"sigma_mu"])
```

OK  (be careful of scaling in plots!)



 
## Autocorrelation {.smaller}

- Another way to evaluate convergence is to look at the autocorrelation between draws of our Markov chain.

  

- The lag $k$ autocorrelation, $\rho_k$, is the correlation between each draw and its $k$th lag, defined as
$$\rho_k = \dfrac{\sum_{s=1}^{S-k}(\theta_s - \bar{\theta})(\theta_{s+k} - \bar{\theta})}{\sum_{s=1}^{S-k}(\theta_s - \bar{\theta})^2}$$

  

- We expect the autocorrelation to decrease as $k$ increases. 

  

- If autocorrelation remains high as $k$ increases, we have slow mixing due to the inability of the sampler to move around the space well.



 
## Autocorrelation for mean {.smaller}

```{r fig.height=3.9}
autocorr.plot(theta.mcmc[,"mu"])
```

So-So


 
## Autocorrelation for variance  {.smaller}

```{r fig.height=3.9}
autocorr.plot(theta.mcmc[,"sigma_mu"])
```

worse




 
## Gelman-Rubin  {.smaller}

Gelman  & Rubin suggested a diagnostic $R$ based on taking separate  chains with dispersed initial values to test convergence

  
```{r, fig.height=4, echo=FALSE}
plot(theta1[1:500,"sigma_mu"], col=2, ylab=expression(sigma[mu]))
points(1:500, theta[1:500, "sigma_mu"], col=1)
```


 
## Gelman-Rubin Diagnostic {.smaller}

- Run m > 2 chains of length 2S from overdispersed starting values.
- Discard the first S draws in each chain.
-  Calculate the pooled within-chain variance $W$ and between-chain variance $B$.
$$R = \frac{\frac{S-1}{S} W + \frac{1}{S} B }{W}$$

  

- numerator and denominator are both unbiased estimates of the variance if the two chains have converged

  
  +  otherwise $W$ is an underestimate (hasn't explored enough)
  +  numerator will overestimate as $B$ is too large (overdispersed starting points)
  
  

- As $S \to \infty$ and $B \to 0$,  $R \to 1$

  

- version in `R` is slightly different 

 
## Gelman-Rubin Diagnostic  {.smaller}

```{r, echo=FALSE}
theta2 = theta
```

```{r, echo=TRUE}
theta.mcmc = mcmc.list(mcmc(theta1, start=5000), mcmc(theta2, start=5000))
gelman.diag(theta.mcmc)
```

  

-  Values of $R > 1.1$ suggest lack of convergence

  
- Looks OK
 
  

- See also `gelman.plot`

 
## Geweke statistic {.smaller}

- Geweke proposed taking two non-overlapping parts of a single Markov chain (usually the first 10% and the last 50%) and comparing the mean of both parts, using a difference of means test

  

- The null hypothesis would be that the two parts of the chain are from the same distribution. 

  

- The test statistic is a z-score with standard errors adjusted for autocorrelation, and if the p-value is significant for a variable, you need more draws. 

- Output in R is the Z score

 
## Geweke Diagnostic  {.smaller}



```{r, echo=TRUE}
geweke.diag(theta.mcmc)
```

- The output is the z-score itself (not the p-value).
 
## Practical advice on diagnostics {.smaller}

- There are more tests we can use: Raftery and Lewis diagnostic, Heidelberger and Welch, etc.

  

- The Gelman-Rubin approach is quite appealing in using multiple chains

  

- Geweke (and Heidelberger and Welch) sometimes reject even when the trace plots look good.

  

- Overly sensitive to minor departures from stationarity that do not impact inferences.

  



- Most common method of assessing convergence is visual examination of trace plots.


 

 

 
##  Improving Results {.smaller}

-  more iterations and multiple chains

  

- thinning to reduce correlations and increase ESS

  

- change the proposal distribution $q$

- adaptive Metropolis to tune $q$



 
## Proposal Distribution {.smaller}




- Common choice 
$$\textsf{N}(\theta^\star; \theta^{(s)}, \delta^2 \Sigma)$$
  

-  rough estimate of $\Sigma$ based on the asymptotic Gaussian approximation $\textsf{Cov}(\theta \mid y)$ and $\delta = 2.38/\sqrt{\text{dim}(\theta)}$ 

  
  + find the MAP estimate (posterior mode)  $\hat{\theta}$
  
  
  + take 
  $$\Sigma =  \left[- 
  \frac{\partial^2 \log(\cal{L}(\theta)) + \log(\pi(\theta))}
       {\partial \theta \partial \theta^T} \right]^{-1}_{\theta = \hat{\theta}}$$
  
  

- ignore prior and use inverse of Fisher Information (covariance of MLE)

 
## Learn Covariance in Proposal? {.smaller}

- Can we learn the proposal distribution?

- ad hoc?  

    - run an initial MCMC for an initial tuning phase (e.g. 1000 samples) with a fixed $\delta$ and estimate $\Sigma(\theta)$ from samples.  
    - run more to tweak $\delta$ to get acceptance rate between $23\%-40\%$.
    - fix the kernel for final run


-  MCMC doesn't allow you to use the full history of the chain $\theta^{(1)}, \ldots, \theta^{(s)}$ in constructing the proposal distributions as it violates the Markov assumption

- even with no further "learning", no guarantee we will converge to posterior!

  

- more elegant approach -  formal **adaptive Metropolis**

  

  + keep adapting the entire time!

. . . 
  
::: {.callout-warning}  
ad hoc adaptation may mess up convergence !  
:::  
   
 
## Adaptive MCMC  {.smaller}



  

-  run  RWM with a Gaussian proposal for a fixed number of iterations for $s < s_0$

  

- estimate of covariance at state $s$
$$\Sigma^{(s)} = \frac{1}{s}\left(\sum_{i=1}^s \theta^{(i)} {\theta^{(i)}}^T - 
s \bar{\theta}^{(s)} {\bar{\theta}^{(s)}}^T\right)$$

  

- proposal for $s > s_0$ with $\delta = 2.38/\sqrt{d}$
$$\theta^* \sim \textsf{N}(\theta^{(s)}, \delta^2 (\Sigma^{(s)} + \epsilon I_d))$$

  

- $\epsilon > 0$ insures covariance is positive definite

  

- if $s_0$ is too large will take longer for adaptation to be seen

 
-  need conditions for vanishing adaptation e.g.  that the proposal depends less and less on recent states in the chain - see [Roberts & Rosenthal (2009)](https://www-tandfonline-com.proxy.lib.duke.edu/doi/pdf/10.1198/jcgs.2009.06134?needAccess=true%7D%7BRoberts%20and%20Rosenthal%20(2009) )for examples and other conditions
  


 
## Example again  
```{r adaptive_metropolis, echo=FALSE}
require(mvtnorm)
tau = .10
eps = .01

sigma = 1
n = 100
mu.true = sort(rnorm(n, 0, tau))
y = rnorm(n, mu.true, sigma)

adapt.MH = function(y, R=10000, B=200, sigma.0 = 1) {
  ybar = mean(y)
  ssy = sum((y - ybar)^2)

#initialize

  theta = matrix(NA, ncol=2, nrow=R)

  log.lik =  function(theta, ybar, ssy, n ) {
    sigma = 1
    mu = theta[1]
    sigma.mu = theta[2]
    -.5*(n*log(sigma^2 + sigma.mu^2) + 
         (ssy + n*(ybar - mu)^2)/(sigma^2 + sigma.mu^2))
}

log.prior = function(theta) { dt(theta[2], 1, log=TRUE)}

Sigma = diag(c(1/n, sigma.0^2))*2.38^2/2

# initialize
theta[1,] = c(ybar, sigma.0)


log.post = log.prior(theta[1,]) + log.lik(theta[1,], ybar, ssy, n)
acc=0

# burnin
for (r in 2:B) {
  theta.star = rmvnorm(1, theta[r-1,], Sigma)
  log.prop = log.prior(theta.star) + log.lik(theta.star, ybar, ssy, n)
  M = min(1, exp(log.prop - log.post))
  if (runif(1) < M) {
    theta[r,] = theta.star
    log.post = log.prop
    acc = acc + 1
  }
  else { 
         theta[r,] = theta[r-1,]
  }
}

 theta.cov = (2.38^2/2)*(cov(theta[1:B,]) + eps*diag(rep(1,2)))
 eps = min(diag(theta.cov))/100
 
 #start adaptive sample
 acc = 0
 for (r in (B+1):R) {
  theta.star = rmvnorm(1, theta[r-1,], theta.cov)
  log.prop = log.prior(theta.star) + log.lik(theta.star, ybar, ssy, n)
  M = min(1, exp(log.prop - log.post))
  if (runif(1) < M) {
    theta[r,] = theta.star
    log.post = log.prop
    acc = acc + 1
  }
  else { 
         theta[r,] = theta[r-1,]
  }
   theta.cov = (2.38^2/2)*(cov(theta[1:r,]) + eps*diag(rep(1,2)))

}
 
 acc = acc/(R - B)
 colnames(theta) = c("mu", "sigma_mu")
 theta[,2] = abs(theta[,2])
 theta = mcmc(theta)
 return(list(theta=theta, acc=acc))
}

out1 = adapt.MH(y, sigma.0=1)

out2 = adapt.MH(y, sigma.0 = 5)

out = mcmc.list(out1$theta, out2$theta)
```

```{r, fig.height=4, echo=FALSE}
show = 1:2000
plot(as.numeric(out2$theta[show,2]), type="l", ylab=expression(sigma[mu]), xlab="state s")
abline(v=200)
lines(as.numeric(out1$theta[show,2]), col=2)
```

Acceptance rate now around 30-35 % of 10,000 iterations!

